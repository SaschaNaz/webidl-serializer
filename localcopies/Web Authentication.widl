partial interface Navigator {
    readonly attribute WebAuthentication authentication;
};

[SecureContext]
interface WebAuthentication {
    Promise<ScopedCredentialInfo> makeCredential(
        Account                              accountInformation,
        sequence<ScopedCredentialParameters> cryptoParameters,
        BufferSource                         attestationChallenge,
        optional ScopedCredentialOptions     options
    );

    Promise<AuthenticationAssertion> getAssertion(
        BufferSource                    assertionChallenge,
        optional AssertionOptions       options
    );
};

[SecureContext]
interface ScopedCredentialInfo {
    readonly    attribute ArrayBuffer   clientDataJSON;
    readonly    attribute ArrayBuffer   attestationObject;
};

dictionary Account {
    required DOMString rpDisplayName;
    required DOMString displayName;
    required DOMString id;
    DOMString          name;
    DOMString          imageURL;
};

dictionary ScopedCredentialParameters {
    required ScopedCredentialType  type;
    required AlgorithmIdentifier   algorithm;
};

dictionary ScopedCredentialOptions {
    unsigned long                        timeout;
    USVString                            rpId;
    sequence<ScopedCredentialDescriptor> excludeList = [];
    Attachment                           attachment;
    AuthenticationExtensions             extensions;
};

enum Attachment {
    "platform",
    "cross-platform"
};

[SecureContext]
interface AuthenticationAssertion {
    readonly attribute ScopedCredential  credential;
    readonly attribute ArrayBuffer       clientDataJSON;
    readonly attribute ArrayBuffer       authenticatorData;
    readonly attribute ArrayBuffer       signature;
};

dictionary AssertionOptions {
    unsigned long                        timeout;
    USVString                            rpId;
    sequence<ScopedCredentialDescriptor> allowList = [];
    AuthenticationExtensions             extensions;
};

dictionary AuthenticationExtensions {
};

dictionary ClientData {
    required DOMString           challenge;
    required DOMString           origin;
    required AlgorithmIdentifier hashAlg;
    DOMString                    tokenBinding;
    AuthenticationExtensions     extensions;
};

enum ScopedCredentialType {
    "ScopedCred"
};

[SecureContext]
interface ScopedCredential {
    readonly attribute ScopedCredentialType type;
    readonly attribute ArrayBuffer          id;
};

dictionary ScopedCredentialDescriptor {
    required ScopedCredentialType type;
    required BufferSource id;
    sequence<Transport>   transports;
};

enum Transport {
    "usb",
    "nfc",
    "ble"
};

typedef sequence<AAGUID> AuthenticatorSelectionList;

typedef BufferSource AAGUID;

